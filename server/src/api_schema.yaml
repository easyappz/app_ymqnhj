openapi: 3.0.0
info:
  title: Running App API
  version: 1.0.0
  description: |
    Easyappz Running App API. All protected endpoints require Authorization header with Bearer JWT token.
servers:
  - url: /api
paths:
  /status:
    get:
      summary: Healthcheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: ok
                timestamp: '2025-01-01T00:00:00.000Z'
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string, minLength: 6 }
                name: { type: string }
                age: { type: number }
                weight: { type: number }
                height: { type: number }
      responses:
        '201':
          description: Created
          content:
            application/json:
              example:
                user:
                  id: '656f1a...'
                  email: user@example.com
                  name: ''
                  age: null
                  weight: null
                  height: null
                  avatarUrl: ''
                  createdAt: '2025-01-01T00:00:00.000Z'
                  updatedAt: '2025-01-01T00:00:00.000Z'
                token: 'jwt.token.here'
        '4XX':
          description: Client error
          content:
            application/json:
              example:
                error:
                  message: 'User already exists'
                  details: 'User with email user@example.com already exists'
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                user:
                  id: '656f1a...'
                  email: user@example.com
                  name: User
                  age: 30
                  weight: 70
                  height: 175
                  avatarUrl: ''
                  createdAt: '2025-01-01T00:00:00.000Z'
                  updatedAt: '2025-01-01T00:00:00.000Z'
                token: 'jwt.token.here'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error:
                  message: 'Invalid credentials'
                  details: 'Incorrect email or password'
  /users/me:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                user:
                  id: '656f1a...'
                  email: user@example.com
                  name: ''
                  age: null
                  weight: null
                  height: null
                  avatarUrl: ''
                  createdAt: '2025-01-01T00:00:00.000Z'
                  updatedAt: '2025-01-01T00:00:00.000Z'
        '401':
          description: Unauthorized
    patch:
      summary: Update current user profile
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                age: { type: number }
                weight: { type: number }
                height: { type: number }
      responses:
        '200':
          description: OK
  /runs:
    get:
      summary: List runs with pagination and optional date filters
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                items: []
                page: 1
                limit: 10
                total: 0
                hasMore: false
    post:
      summary: Create a run
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [date, distanceKm, durationMin]
              properties:
                date: { type: string, format: date-time }
                distanceKm: { type: number, minimum: 0 }
                durationMin: { type: number, minimum: 0 }
                calories: { type: number, minimum: 0 }
                notes: { type: string }
                route: { type: string, description: 'Route ObjectId' }
      responses:
        '201':
          description: Created
  /runs/{id}:
    get:
      summary: Get run by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    patch:
      summary: Update run
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date: { type: string, format: date-time }
                distanceKm: { type: number, minimum: 0 }
                durationMin: { type: number, minimum: 0 }
                calories: { type: number, minimum: 0 }
                notes: { type: string }
                route: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    delete:
      summary: Delete run
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /routes:
    get:
      summary: List routes with pagination
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        '200': { description: OK }
    post:
      summary: Create route
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                description: { type: string }
                points:
                  type: array
                  items:
                    type: object
                    properties:
                      lat: { type: number }
                      lng: { type: number }
                totalDistanceKm: { type: number, minimum: 0 }
      responses:
        '201': { description: Created }
  /routes/{id}:
    get:
      summary: Get route by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    patch:
      summary: Update route
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                points:
                  type: array
                  items:
                    type: object
                    properties:
                      lat: { type: number }
                      lng: { type: number }
                totalDistanceKm: { type: number, minimum: 0 }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    delete:
      summary: Delete route
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /goals:
    get:
      summary: List goals with pagination and optional status filter
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
        - in: query
          name: status
          schema: { type: string, enum: [active, completed, failed] }
      responses:
        '200': { description: OK }
    post:
      summary: Create goal
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, targetType, targetValue, period, startDate, endDate]
              properties:
                title: { type: string }
                targetType: { type: string, enum: [distance, duration, pace, frequency] }
                targetValue: { type: number, minimum: 0 }
                period: { type: string, enum: [week, month, custom] }
                startDate: { type: string, format: date-time }
                endDate: { type: string, format: date-time }
                progressValue: { type: number, minimum: 0 }
      responses:
        '201': { description: Created }
  /goals/{id}:
    get:
      summary: Get goal by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    patch:
      summary: Update goal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                targetType: { type: string, enum: [distance, duration, pace, frequency] }
                targetValue: { type: number, minimum: 0 }
                period: { type: string, enum: [week, month, custom] }
                startDate: { type: string, format: date-time }
                endDate: { type: string, format: date-time }
                progressValue: { type: number, minimum: 0 }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    delete:
      summary: Delete goal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /stats/summary:
    get:
      summary: Summary stats for runs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                summary:
                  totalDistanceKm: 42.2
                  totalDurationMin: 240
                  totalRuns: 5
                  avgPace: 5.68
  /stats/weekly:
    get:
      summary: Weekly aggregates (last N weeks)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: n
          schema: { type: integer, minimum: 1, maximum: 52, default: 12 }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                items:
                  - year: 2025
                    week: 1
                    totalDistanceKm: 30
                    totalDurationMin: 160
                    totalRuns: 3
                    avgPace: 5.33
  /stats/monthly:
    get:
      summary: Monthly aggregates (last N months)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: n
          schema: { type: integer, minimum: 1, maximum: 36, default: 12 }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                items:
                  - year: 2025
                    month: 1
                    totalDistanceKm: 120
                    totalDurationMin: 640
                    totalRuns: 12
                    avgPace: 5.33
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message: { type: string }
            details: { type: string }
